# -*- mode: org -*-
# #+REVEAL_ROOT: ./
#+REVEAL_EXTRA_CSS: ./maze.css
#+REVEAL_THEME: simple
# #+REVEAL_TITLE_SLIDE_TEMPLATE: Recursive Search

# KGF: This was the old way to customize the title slide (last commit was in 2015)
# Changed in 2016. See bottom of this document for new way to override automatic title.
# https://github.com/yjwen/org-reveal/issues/272

#+OPTIONS: num:nil toc:nil

* Prerequisites
- Simple recursion in Java
- How the recursion stack saves values
-
  #+begin_export html
  <table>
  <tr><td><img class="quad" src="maze1.jpg"></td><td><img class="quad" src="maze4.jpg"></td></tr>
  <tr><td><img class="quad" src="maze3.jpg"></td><td><img class="quad" src="maze2.jpg"></td></tr>
  </table>
  #+end_export

* You're lost in a maze
#+ATTR_REVEAL: :frag fade-in
- How do you find your way out?
- Right Hand rule:
-
  #+begin_export html
  <img src=right.jpg>
  #+end_export
* Fail!!!!!
#+begin_export html
<img src="right-fail.png">
#+end_export
* Let's go to the literature
#+ATTR_REVEAL: :frag fade-in
- Theseus
-
  #+begin_export html
  <img src="theseus.jpg">
  #+end_export
- Hansel and Gretel
-
  #+begin_export html
  <img src="hansel.jpg">
  #+end_export
* We can look at a "State" of the maze
#+begin_src ditaa :file s1.png :cmdline -E

                +---+
                |   |
                | X |
                |   |
                +---+---+---+
                |   |   |   |
                |   |   |   |
                |   |   |   |
                +---+---+---+
                |   |
                |   |
                |   |
                +---+
#+end_src

#+RESULTS:
[[file:s1.png]]

* Or a bunch of states
#+begin_src ditaa :file s2.png :cmdline -E


  +---+                          +---+
  |   |                          |   |
  | X |                          | X |
  |   |                          |   |
  +---+---+---+                  +---+---+---+
  |   |   |   |                  |   |   |   |
  |   |   |   |                  | x |   |   |
  |   |   |   |                  |   |   |   |
  +---+---+---+                  +---+---+---+
  |   |                          |   |
  |   |                          |   |
  |   |                          |   |
  +---+                          +---+



  +---+                          +---+                        +---+
  |   |                          |   |                        |   |
  | X |                          | X |                        | X |
  |   |                          |   |                        |   |
  +---+---+---+                  +---+---+---+                +---+---+---+
  |   |   |   |                  |   |   |   |                |   |   |   |
  | x |   |   |                  | x | x |   |                | x | x | x |
  |   |   |   |                  |   |   |   |                |   |   |   |
  +---+---+---+                  +---+---+---+                +---+---+---+
  |   |                          |   |                        |   |
  | x |                          |   |                        |   |
  |   |                          |   |                        |   |
  +---+                          +---+                        +---+
#+end_src

* And we can transition from state to state
#+begin_src ditaa :file s3.png :cmdline -E
  +---+                          +---+
  |   |                          |   |
  | X |                          | X |
  |   |                          |   |
  +---+---+---+                  +---+---+---+
  |   |   |   |                  |   |   |   |
  |   |   |   |----------------->| x |   |   |
  |   |   |   |                  |   |   |   |
  +---+---+---+                  +---+---+---+
  |   |                          |   |
  |   |                          |   |
  |   |                          |   |
  +---+                          +---+
    |                              |
    |                              |
    v                              v
  +---+                          +---+                        +---+
  |   |                          |   |                        |   |
  | X |                          | X |                        | X |
  |   |                          |   |                        |   |
  +---+---+---+                  +---+---+---+                +---+---+---+
  |   |   |   |                  |   |   |   |                |   |   |   |
  | x |   |   |                  | x | x |   |--------------->| x | x | x |
  |   |   |   |                  |   |   |   |                |   |   |   |
  +---+---+---+                  +---+---+---+                +---+---+---+
  |   |                          |   |                        |   |
  | x |                          |   |                        |   |
  |   |                          |   |                        |   |
  +---+                          +---+                        +---+
#+end_src

#+RESULTS:
[[file:s2.png]]

* What do we need?
#+ATTR_REVEAL: :frag fade-in
- Take steps one at a time to get closer to our solution
- Keep track of where we've been so we can back up
- Recursion!!!!!!!!!!
- Recall factorial:
  #+begin_src java
  public int fact(int n){
    if (n<=1)
      return 1;
    else
      return n * fact(n-1);
  }
  #+end_src
* Storing previous state:
#+ATTR_REVEAL: :frag fade-in
- Factorial
  #+begin_src ditaa :file fib.png
  +----------------------+
  | fact(0) -> 1         |
  |                      |
  +----------------------+
  | fact(1) -> 1xfact(0) |
  |                      |
  +----------------------+
  | fact(2) -> 2xfact(1) |
  |                      |
  +----------------------+
  | fact(3) -> 3xfact(2) |
  |                      |
  +----------------------+
  | fact(4) -> 4xfact(3) |
  |                      |
  +----------------------+
  | fact(5) -> 5xfact(4) |
  |                      |
  +----------------------+
      Stack
  #+end_src

#+ATTR_REVEAL: :frag fade-in
- Maze
 #+begin_src ditaa :file mstack.png
  +-----------------+
  | Maze step 4     |
  |                 |
  +-----------------+
  | Maze step 3     |
  |                 |
  +-----------------+
  | Maze step 2     |
  |                 |
  +-----------------+
  | Maze step 1     |
  |                 |
  +-----------------+
  | Maze start      |
  |                 |
  +-----------------+
        Stack
  #+end_src

* Working it out
#+ATTR_REVEAL: :frag fade-in
- Base case?
  #+ATTR_REVEAL: :frag fade-in
  - found exit?
  - hit a wall?
- Move to next state?
  #+ATTR_REVEAL: :frag fade-in
  - four possible recursive calls
  - x+1, x-1, y+1, y-1
* How can we represent our maze?
#+ATTR_REVEAL: :frag fade-in
- 2D array
- Space = wall, # = path, z = us
-
 #+begin_export html
<pre>
 #################
 #   #        #  #
 #   #        #  ##################
 #   #        #            #      #
 #   #        #            #      #
 #   #######  #   ##########      #
 ###       #  #            #      #
 ####################      #      #
 #####       #                    #
 #           #                    #
 #           #       #            #
 #           #       #            #
 #           #       #            #
             #       #            #
  ################   ###############
                #            #######
                #
                ##########$
     </pre>y
#+end_export

* Algorithm
- Base cases
  - If we're at a wall, return
  - If we're at the exit, set solved to true and return
  - If we're solved, return
- Recursive reduction
  - Put us (z) in the current x,y location of the 2D array
  - solve from the x+1 location
  - solve from the x-1 location
  - solve from the y+1 location
  - solve from the y-1 location
  - if not solved, remove us from the board
* Solver
#+begin_src java
                public void solve(int x, int y){
                                if (board[x][y]==wall ||
                                                board[x][y]==visited ||
                                                solved){
                                                return;
                                }

                                if (board[x][y]==exit){
                                                System.out.println(this);
                                                solved = true;
                                }

                                System.out.println(this);
                                board[x][y]=me;
                                solve(x+1,y);
                                solve(x-1,y);
                                solve(x,y+1);
                                solve(x,y-1);
                                if (!solved){
                                                board[x][y]=visited;
                                }
                }

#+end_src
* Let's look at finished solver
* Next steps
- Other state space search and related problems
- Heuristic Search
- Pathway to more advanced search (A*)
- implicit data structures

* COMMENT KGF: Notes on Ditaa setup, HTML exporting
# Original Error on exporting with org-re-reveal:
# org-babel-execute:ditaa: Could not find ditaa.jar at
# /Users/kfelker/.emacs.d/elpa/contrib/scripts/ditaa.jar

# INSTALL DITAA
# brew install ditaa; brew unlink --dry-run ditaa
# file /usr/local/bin/ditaa
# shows that
# /usr/local/bin/ditaa is a Bash script:
# #!/bin/bash
# exec java  -jar /usr/local/Cellar/ditaa/0.11.0/libexec/ditaa-0.11.0-standalone.jar "$@"

# SYMBOLIC LINK FROM WHERE EMACS EXPECTS .JAR TO INSTALLED JAR
# https://emacs.stackexchange.com/questions/20731/setting-up-ditaa-in-org-mode

# cd ln -s /usr/local/Cellar/ditaa/0.11.0/libexec/ditaa-0.11.0-standalone.jar ditaa.jar
#  ln -s /usr/local/Cellar/ditaa/0.11.0/libexec/ditaa-0.11.0-standalone.jar ditaa.jar

https://emacs.stackexchange.com/questions/33601/how-to-include-rendered-html-in-org-mode
[BTW, this assumes a recent version of org-mode. Earlier versions used #+BEGIN_HTML
... #+END_HTML instead.]

Changed in v9.2!
https://www.reddit.com/r/orgmode/comments/aasc9m/org_92_released/
Hi, I found out that #+BEGIN_HTML... #+END_HTML for rendering HTML code blocks when
exporting is not working (at least from version 9.1.9 on) anymore. Is there any other
change we should get awarded of?


Org Mode: Structure Templates
https://orgmode.org/manual/Structure-Templates.html

* COMMENT Why is ~save-buffer~ calling ~delete-trailing-whitespace~
#+begin_example
M-x debug-on-entry RET delete-trailing-whitespace
Debugger entered--entering a function:
  * delete-trailing-whitespace()
  (save-excursion (delete-trailing-whitespace))
  (lambda nil (save-excursion (delete-trailing-whitespace)))()
  run-hook-with-args-until-success((lambda nil (save-excursion (delete-trailing-whitespace))))
  basic-save-buffer(t)
  save-buffer(1)
  funcall-interactively(save-buffer 1)
  call-interactively(save-buffer nil nil)
  command-execute(save-buffer)
#+end_example

https://stackoverflow.com/questions/1931784/emacs-is-before-save-hook-a-local-variable
I added delete-trailing-whitespace to the before-save-hook in my c-mode-common-hook, but
it looks like delete-trailing-whitespace is getting called for every file, not just
buffers using c-mode and derivatives.

ANSWER: ~local-write-file-hooks~

Add it to ~write-contents-functions~ instead:

This works just like write-file-functions, but it is intended for hooks that pertain to
the buffer's contents, not to the particular visited file or its location. Such hooks are
usually set up by major modes, as buffer-local bindings for this variable. This variable
automatically becomes buffer-local whenever it is set; switching to a new major mode
always resets this variable, but calling set-visited-file-name does not.

Variable: local-write-file-hooks
This works just like write-file-hooks, but it is intended to be made local to particular
buffers. It's not a good idea to make write-file-hooks local to a buffer--use this
variable instead.



#+begin_example
local-write-file-hooks is a variable defined in ‘files.el’.
Its value is
((lambda nil
   (save-excursion
     (delete-trailing-whitespace))))
Local in buffer lesson.org; global value is nil

  Automatically becomes permanently buffer-local when set.
  This variable is obsolete since 22.1;
  use ‘write-file-functions’ instead.
  This variable may be risky if used as a file-local variable.
#+end_example

* COMMENT Org-Mode File-Local Variables
:PROPERTIES:
:VISIBILITY: folded
:end:

# example of suggested fix from StackOverflow:
# # org-reveal-title-slide: " <h1 class='mytitle'>%t</h1>"

# Not sure why Control-L (caret notation for ASCII control codes) is font-locked as cyan
# here, but orange in other .org mode documents based on org-min.org
# M-x what-cursor-position:
# Char: C-l (12, #o14, #xc) point=9193 of 9289 (99%) column=0
# (the orange text color changed now in other files upon reopening?!?!?)


# Local Variables:
# mode: org
# org-re-reveal-title-slide: "<h2>Recursive Search</h2>"
# End:
